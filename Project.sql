-- 1. What is the total revenue generated from all rentals in the database? 
select sum(amount) from payment;

-- 2. How many rentals were made in each month_name? 
select monthname(rental_date),count(rental_id) from rental group by monthname(rental_date);

-- 3. What is the rental rate of the film with the longest title in the database? 
select title,rental_rate from film where char_length(title) =(select max(char_length(title)) from film);

-- 4. What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? 

select avg(rental_rate)
from rental join inventory using (inventory_id)
join film using (film_id)
where rental_date between "2005-05-05" and (select adddate("2005-05-05",30));


-- 5. What is the most popular category of films in terms of the number of rentals? 
-- rental_id from payment
-- category from film category

with cte2 as(
with cte1 as(
select name,category_id,count(rental_id) as no_of_rental
from rental 
join inventory using (inventory_id)
join film_category using (film_id)
join category using (category_id)
group by category_id,name)
select * ,dense_rank() over(order by no_of_rental desc)  as rental_rank from cte1)
select name from cte2 where rental_rank=1;


-- 6. Find the longest movie duration from the list of films that have not been rented by any customer. 

with cte1 as (
select film_id as long_filmid,title from film where rental_duration =(select max(rental_duration)  from film))
select * from cte1 where long_filmid not in 
(select distinct film_id from rental 
join inventory using(inventory_id)
join film using(film_id));


-- 7. What is the average rental rate for films, broken down by category? 

select distinct name as category,avg(rental_rate) over(partition by category_id ) as avg_rental_rate
from film join film_category using (film_id)
join category using (category_id);


-- 8. What is the total revenue generated from rentals for each actor in the database? 

select actor_id,sum(amount)
from payment join rental using(rental_id)
join inventory using (inventory_id)
join film_actor using(film_id)
join actor using (actor_id)
group by actor_id;


-- 9. Show all the actresses who worked in a film having a "Wrestler" in the description. 

select  distinct actor_id, first_name 
from film join film_actor using (film_id)
join actor using (actor_id)
where description like "%Wrestler%";

-- 10. Which customers have rented the same film more than once? 

select customer_id,first_name,film_id,title,count(film_id) as no_of_count
from customer join rental using (customer_id)
join inventory using (inventory_id)
join film using (film_id)
group by customer_id,film_id
having no_of_count >1;


-- 11. How many films in the comedy category have a rental rate higher than the average rental rate? 

with cte1 as (
select film_id,sum(amount) 
from film join film_category using (film_id)
join category using(category_id)
join inventory using (film_id)
join rental using (inventory_id)
join payment using (rental_id)
where name='comedy' 
group by film_id
having sum(amount) > (select avg(amount) from payment))
select count(film_id) as comedy_films from cte1;

-- 12. Which films have been rented the most by customers living in each city?

with cte2 as(
with cte1 as(
select film_id,title,city,count(film_id) over(partition by film_id) as rent_count
from rental join inventory using(inventory_id)
join film using (film_id)
join customer using (customer_id)
join address using (address_id)
join city using (city_id))
select *, max(rent_count)  over(partition by city) as max_count from cte1)
select * from cte2 where rent_count =max_count;


-- 13. What is the total amount spent by customers whose rental payments exceed $200? 

with cte1 as(
select distinct customer_id,sum(amount)  over(partition by customer_id) as rental_payment from payment)
select * from cte1 where rental_payment>200;

-- 14. Display the fields which are having foreign key constraints related to the "rental" table. [Hint: using Information_schema] 
describe rental;

select rental_date, inventory_id, customer_id,staff_id from rental;

use information_schema;
show tables;

select * from innodb_foreign;

select * from innodb_foreign where (substring_index(for_name,'/',-1) = 'rental' or substring_index(ref_name,'/',-1)= 'rental') 
and substring_index(for_name,'/',1)='film_rental';

-- 15. Create a View for the total revenue generated by each staff member, broken down by store city with the country name. 

create view total_revenue as
select distinct staff_id,store_id,city,country, sum(amount) over(partition by staff_id order by city) as total_revenue
from store join address using (address_id)
join city using(city_id)
join country using (country_id)
join staff using (store_id)
join payment using (staff_id);

select * from total_revenue;


-- 16. Create a view based on rental information consisting of visiting_day, customer_name, the title of the film, no_of_rental_days, 
-- the amount paid by the customer along with the percentage of customer spending. 
-- Assuming visiting day as rental date


create view  customer_spending_percentage as
with cte1 as(
select a.customer_id,rental_date as visiting_day , first_name as customer_name,
title,rental_duration as no_of_rental_days,amount
from rental 
join inventory using (inventory_id)
join film using (film_id)
join customer a using (customer_id)
join payment using (rental_id)),

cte3 as(
with cte2 as(
select a.customer_id, sum(amount) as sum_amount
from rental 
join inventory using (inventory_id)
join film using (film_id)
join customer a using (customer_id)
join payment using (rental_id)
group by a.customer_id)
select *, sum_amount *100 /(select sum(amount) from payment) as percentage from cte2)
select * from cte1 left join cte3 using (customer_id);

select * from customer_spending_percentage;

-- 17. Display the customers who paid 50% of their total rental costs within one day. (5 Marks)

select distinct concat(first_name,' ',last_name) as customer_name,email ,sum(amount)
from payment p
join rental using(rental_id)
join customer c on (p.customer_id=c.customer_id)
where date_add(rental_date , INTERVAL 1 DAY)
group by customer_name,email
having sum(p.amount)<= (0.5 * (select sum(amount) from payment));





